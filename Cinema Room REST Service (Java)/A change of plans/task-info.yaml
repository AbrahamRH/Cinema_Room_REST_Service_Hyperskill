type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/controller/cinemaController.java
  visible: true
  text: |
    package cinema.controller;
    import cinema.Main;
    import cinema.Model.seat;
    import cinema.Model.theatre;
    import cinema.dto.theatreDto;
    import cinema.Exceptions.PurchasedException;
    import com.fasterxml.jackson.annotation.JsonAutoDetect;
    import com.fasterxml.jackson.annotation.PropertyAccessor;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.node.ObjectNode;
    import org.apache.coyote.Response;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Map;

    @RestController
    public class cinemaController {
      private final theatre cinema;
      private theatreDto cinemaDto;
      private final Logger log = LoggerFactory.getLogger(Main.class);
      ObjectMapper om = new ObjectMapper();

      @Autowired
      public cinemaController(theatre cinema){
        this.cinema = cinema;
        this.cinemaDto = new theatreDto(cinema.getTotal_rows(),cinema.getTotal_columns(), cinema.getSeats());
        om.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
      }

      @GetMapping(path="/seats")
      public String getSeats(){
        try {
          return om.writeValueAsString(cinemaDto);
        } catch(Exception e){
          log.error("Error /seats  - {}", e.getMessage());
          return null;
        }
      }

      @PostMapping(path = "/purchase")
      public ResponseEntity<?> purchase(@RequestBody seat seat) throws JsonProcessingException {
        try {
          return new ResponseEntity<>(om.writeValueAsString(cinemaDto.purchase(seat.getRow(), seat.getColumn())), HttpStatus.OK);
        } catch (JsonProcessingException jsonEx) {
          log.error("Error /purchase  - {}", jsonEx.getMessage());
          return null;
        } catch (Exception indexEx){
          return new ResponseEntity<>(Map.of("error", indexEx.getMessage()),HttpStatus.BAD_REQUEST);
        }
      }

    }
  learner_created: true
- name: src/cinema/Model/theatre.java
  visible: true
  text: |
    package cinema.Model;

    import org.springframework.stereotype.Component;

    import com.google.common.collect.Table;
    import com.google.common.collect.HashBasedTable;

    @Component
    public class theatre {
      int total_rows;
      int total_columns;
      Table<Integer, Integer,Integer> seats = HashBasedTable.create();

      public theatre(){
        this.total_columns = 9;
        this.total_rows = 9;
        initSeats();
      }

      public int getTotal_columns() {
        return total_columns;
      }

      public int getTotal_rows() {
        return total_rows;
      }

      public Table<Integer,Integer, Integer> getSeats(){
        return seats;
      }

      private void initSeats(){
        for(int i = 1 ; i <= total_rows ; i++){
          int price = (i <= 4) ? 10 : 8;
          for(int j = 1 ; j <= total_columns ; j++){
            seats.put(i,j,price);
          }
        }
      }
    }
  learner_created: true
- name: src/cinema/Exceptions/PurchasedException.java
  visible: true
  text: |
    package cinema.Exceptions;

    public class PurchasedException extends Exception{
      public PurchasedException(String message){
        super(message);
      }
    }
  learner_created: true
- name: src/cinema/dto/theatreDto.java
  visible: true
  text: |+
    package cinema.dto;

    import cinema.Exceptions.PurchasedException;
    import cinema.Model.seat;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.google.common.collect.Table;

    import java.util.ArrayList;
    import java.util.List;

    public class theatreDto {
      int total_rows;
      int total_columns;
      List<seat> available_seats = new ArrayList<>();
      @JsonIgnore
      Table<Integer,Integer,Integer> seats;

      public theatreDto(int total_rows, int total_columns, Table<Integer,Integer,Integer> seats) {
        this.total_rows = total_rows;
        this.total_columns = total_columns;
        this.seats = seats;
        getAvailable_seats();
      }

      public void getAvailable_seats(){
        for(int i = 1 ; i <= seats.rowKeySet().size() ; i++){
          for(int j = 1 ; j <= seats.columnKeySet().size() ; j++){
            available_seats.add(new seat(i,j));
          }
        }
      }
      public seat purchase(int row, int column) throws PurchasedException {
        if(seats.contains(row,column)){
          seat newSeat =  new seat(row, column);
          seats.remove(row, column);
          return newSeat;
        } else if ( column > seats.columnKeySet().size() || row > seats.rowKeySet().size() || column < 1 || row < 1) {
          throw new IndexOutOfBoundsException("The number of a row or a column is out of bounds!");
        }
        throw new PurchasedException("The ticket has been already purchased!");
      }
    }

  learner_created: true
- name: src/cinema/Model/Purchase.java
  visible: true
  learner_created: true
- name: src/cinema/Model/Ticket.java
  visible: true
  text: |
    package cinema.Model;

    public class seat {
      private int row;
      private int column;
      private int price;

      public seat(int row, int column){
        this.row = row;
        this.column = column;
        this.price = (row <= 4) ? 10 : 8;
      }

      public seat(){

      }

      public int getRow() {
        return row;
      }

      public int getColumn() {
        return column;
      }

      public int getPrice() {
        return price;
      }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 22 May 2023 15:56:05 UTC"
record: 3
